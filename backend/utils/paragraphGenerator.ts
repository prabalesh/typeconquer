const wordBank = {
    easy: [
        "cat",
        "dog",
        "fish",
        "house",
        "car",
        "tree",
        "bird",
        "apple",
        "sun",
        "book",
        "water",
        "food",
        "friend",
        "happy",
        "blue",
        "green",
        "yellow",
        "red",
        "day",
        "night",
        "school",
        "family",
        "game",
        "phone",
        "light",
        "chair",
        "shoe",
        "milk",
        "bread",
        "cup",
        "table",
        "door",
        "window",
        "ball",
        "hat",
        "star",
        "grass",
        "rain",
        "snow",
        "toy",
        "bag",
        "pen",
        "hat",
        "shirt",
        "skirt",
        "sock",
        "pillow",
        "blanket",
        "clock",
        "bell",
        "window",
        "door",
        "key",
        "bag",
        "pencil",
        "eraser",
        "brush",
        "sponge",
        "plate",
        "fork",
        "spoon",
        "knife",
        "towel",
        "rug",
        "lamp",
        "cupboard",
        "shelf",
        "fan",
        "radio",
        "tape",
        "glove",
        "scarf",
        "button",
        "bag",
        "doll",
        "car",
        "train",
        "plane",
        "boat",
        "kite",
        "ring",
        "shoe",
        "brush",
        "mirror",
        "sofa",
        "desk",
        "chair",
        "bed",
        "lamp",
        "bottle",
        "box",
        "basket",
        "balloon",
        "jacket",
        "hat",
        "shirt",
        "trousers",
        "shorts",
        "glove",
        "slippers",
        "sandals",
        "socks",
        "scarf",
        "sweater",
        "blanket",
        "pillow",
        "coat",
        "suit",
        "tuxedo",
        "tie",
        "belt",
        "hat",
        "scarf",
        "sunglasses",
        "umbrella",
        "raincoat",
        "swimsuit",
        "jumpsuit",
        "sweater",
        "robe",
        "pajamas",
        "beanie",
        "headband",
        "headphones",
        "earmuffs",
        "earrings",
        "bracelet",
        "necklace",
        "ring",
        "watch",
        "wallet",
        "bag",
        "briefcase",
        "suitcase",
        "luggage",
        "backpack",
        "umbrella",
        "sunglasses",
        "gloves",
        "scarf",
        "cap",
        "hat",
        "belt",
        "socks",
        "shoes",
        "sandals",
        "boots",
        "sneakers",
        "slippers",
        "loafers",
        "moccasins",
        "ballet flats",
        "high heels",
        "wedge sandals",
        "flip-flops",
        "clogs",
        "snow boots",
        "rain boots",
        "dress",
        "skirt",
        "pants",
        "jeans",
        "shorts",
        "suit",
        "jacket",
        "blazer",
        "cardigan",
        "sweater",
        "shirt",
        "blouse",
        "tank top",
        "t-shirt",
        "hoodie",
        "sweatshirt",
        "jumpsuit",
        "overalls",
        "romper",
        "pajamas",
        "robe",
        "kilt",
        "kimono",
        "sari",
        "cheongsam",
        "hijab",
        "turban",
        "scarf",
        "shawl",
        "poncho",
        "cape",
        "fur coat",
        "trench coat",
        "raincoat",
        "windbreaker",
        "vest",
        "suspenders",
        "bow tie",
        "cravat",
        "necktie",
        "ascot",
        "handkerchief",
        "pocket square",
        "collar",
        "cufflinks",
        "epaulettes",
        "brooch",
        "pin",
        "patch",
        "badge",
        "keychain",
        "lanyard",
        "name tag",
        "ticket",
        "pass",
        "id badge",
        "security pass",
        "access card",
        "membership card",
        "loyalty card",
        "gift card",
        "credit card",
        "debit card",
        "business card",
        "calling card",
        "bank card",
        "ATM card",
        "library card",
        "insurance card",
        "health card",
        "student card",
        "work badge",
        "ID card",
        "vaccine card",
        "passport",
        "visa",
        "permit",
        "license",
        "certificate",
        "diploma",
        "transcript",
        "report card",
        "certificate of achievement",
        "award",
        "trophy",
        "medal",
        "plaque",
        "ribbon",
        "certificate of participation",
        "recognition",
        "honor",
        "distinction",
        "commendation",
        "citation",
        "congratulation",
        "accolade",
        "tribute",
        "honorarium",
        "gift",
        "present",
        "token",
        "souvenir",
        "keepsake",
        "memento",
        "memorabilia",
        "artifact",
        "relic",
        "antique",
        "curio",
        "collectible",
        "novelty",
        "gadget",
        "gizmo",
        "widget",
        "device",
        "appliance",
        "tool",
        "instrument",
        "implement",
        "utensil",
        "machine",
        "contraption",
        "appliance",
        "gizmo",
        "gadget",
    ],
    medium: [
        "elephant",
        "giraffe",
        "octopus",
        "bicycle",
        "mountain",
        "computer",
        "pencil",
        "laptop",
        "sandwich",
        "camera",
        "jungle",
        "desert",
        "airplane",
        "suitcase",
        "telescope",
        "microscope",
        "refrigerator",
        "microwave",
        "calculator",
        "umbrella",
        "calendar",
        "binoculars",
        "volcano",
        "tornado",
        "submarine",
        "robot",
        "canyon",
        "galaxy",
        "planet",
        "satellite",
        "astronomy",
        "biology",
        "geography",
        "chemistry",
        "architecture",
        "engineer",
        "universe",
        "horizon",
        "adventure",
        "bison",
        "dolphin",
        "flamingo",
        "grizzly",
        "hummingbird",
        "koala",
        "lobster",
        "manatee",
        "octopus",
        "penguin",
        "quokka",
        "raccoon",
        "seagull",
        "tarantula",
        "vulture",
        "walrus",
        "xenops",
        "yak",
        "zebra",
        "hologram",
        "moonlight",
        "nebula",
        "sunrise",
        "sunset",
        "aurora",
        "rainforest",
        "meadow",
        "brook",
        "waterfall",
        "cave",
        "crevasse",
        "crater",
        "geyser",
        "volcano",
        "plasma",
        "quasar",
        "pulsar",
        "asteroid",
        "comet",
        "meteor",
        "lunar",
        "orbital",
        "tide",
        "current",
        "twilight",
        "glacier",
        "oasis",
        "plateau",
        "ravine",
        "fjord",
        "delta",
        "prairie",
        "savanna",
        "steppe",
        "tundra",
        "desert",
        "jungle",
        "marsh",
        "swamp",
        "bog",
        "fen",
        "riverbank",
        "lakeside",
        "shoreline",
        "meadow",
        "pasture",
        "field",
        "grove",
        "orchard",
        "vineyard",
        "garden",
        "park",
        "zoo",
        "sanctuary",
        "conservatory",
        "reserve",
        "habitat",
        "ecosystem",
        "biome",
        "biodiversity",
        "sustainability",
        "conservation",
        "restoration",
        "preservation",
        "management",
        "ecology",
        "environment",
        "climate",
        "weather",
        "forecast",
        "season",
        "temperature",
        "humidity",
        "precipitation",
        "wind",
        "pressure",
        "altitude",
        "latitude",
        "longitude",
        "elevation",
        "geology",
        "geography",
        "cartography",
        "mapping",
        "navigation",
        "exploration",
        "expedition",
        "survey",
        "research",
        "analysis",
        "study",
        "investigation",
        "observation",
        "experiment",
        "testing",
        "evaluation",
        "assessment",
        "measurement",
        "monitoring",
        "tracking",
        "recording",
        "documentation",
    ],
    hard: [
        "abstruse",
        "cacophony",
        "dichotomy",
        "echelon",
        "facetious",
        "garrulous",
        "haphazard",
        "juxtapose",
        "languid",
        "meticulous",
        "nomenclature",
        "obfuscate",
        "paradox",
        "quintessence",
        "recalcitrant",
        "sanguine",
        "terse",
        "ubiquitous",
        "vortex",
        "writhe",
        "xenophobia",
        "yoke",
        "zenith",
        "ambiguous",
        "cacophony",
        "debilitate",
        "effervescent",
        "germinate",
        "hypothesis",
        "infallible",
        "juxtaposition",
        "labyrinth",
        "mellifluous",
        "nomenclature",
        "obfuscate",
        "paradigm",
        "quizzical",
        "recapitulate",
        "serendipity",
        "transcendent",
        "ubiquity",
        "vortex",
        "whimsical",
        "xenogeny",
        "youthful",
        "zenith",
        "incongruous",
        "juxtapose",
        "kaleidoscope",
        "loquacious",
        "metamorphosis",
        "nonchalant",
        "obfuscation",
        "paradigm",
        "quizzical",
        "recapitulate",
        "serendipity",
        "transcendent",
        "ubiquity",
        "vortex",
        "whimsical",
        "xenogeny",
        "youthful",
        "zenith",
        "abate",
        "blasphemy",
        "cathartic",
        "disparage",
        "ephemeral",
        "fervent",
        "gargantuan",
        "heuristic",
        "iconoclast",
        "juxtaposition",
        "kaleidoscope",
        "legitimate",
        "magnitude",
        "nomenclature",
        "obfuscate",
        "paragon",
        "quintessential",
        "resilient",
        "synergy",
        "tumultuous",
        "ubiquitous",
        "veracity",
        "warrant",
        "xenogeneic",
        "youthful",
        "zenith",
    ],
};

export type Difficulty = "easy" | "medium" | "hard";

export interface ParagraphOptions {
    wordCount: number;
    difficulty: Difficulty;
    includeSymbols?: boolean;
    includeNumbers?: boolean;
}

const prepositions = [
    "in",
    "on",
    "at",
    "with",
    "by",
    "for",
    "from",
    "about",
    "under",
    "over",
];
const adjectives = [
    "big",
    "small",
    "happy",
    "sad",
    "fast",
    "slow",
    "bright",
    "dark",
    "hot",
    "cold",
];
const conjunctions = [
    "and",
    "but",
    "or",
    "nor",
    "so",
    "yet",
    "because",
    "although",
    "if",
    "unless",
];
const interjections = [
    "wow",
    "oops",
    "hey",
    "yay",
    "ugh",
    "oh",
    "ah",
    "hmm",
    "oh no",
    "yikes",
];

const symbols = ["!", "@", "#", "$", "%", "^", "&", "*", "(", ")"];
const numbers = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];

function getRandomElement<T>(arr: T[]): T {
    if (arr.length === 0) {
        throw new Error("Array cannot be empty");
    }
    return arr[Math.floor(Math.random() * arr.length)];
}

function shuffleArray<T>(arr: T[]): T[] {
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function capitalizeFirstLetter(str: string): string {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

export default function generateParagraph({
    wordCount,
    difficulty = "medium",
    includeSymbols = false,
    includeNumbers = false,
}: ParagraphOptions): string {
    const words = wordBank[difficulty];
    const specialWordCount = Math.floor(wordCount * 0.4);
    const normalWordCount = wordCount - specialWordCount;

    const specialWords: string[] = [];
    const normalWords: string[] = [];

    for (let i = 0; i < specialWordCount; i++) {
        let word = "a";
        const type = Math.floor(Math.random() * 4);

        switch (type) {
            case 0:
                word = getRandomElement(prepositions);
                break;
            case 1:
                word = getRandomElement(adjectives);
                break;
            case 2:
                word = getRandomElement(conjunctions);
                break;
            case 3:
                word = getRandomElement(interjections);
                if (includeSymbols) {
                    word += getRandomElement(symbols);
                }
                break;
        }

        specialWords.push(word);
    }

    while (normalWords.length < normalWordCount) {
        let word: string = getRandomElement(words);
        if (includeSymbols && Math.random() < 0.2) {
            word += getRandomElement(symbols);
        }
        if (includeNumbers && Math.random() < 0.2) {
            word += getRandomElement(numbers);
        }
        normalWords.push(word);
    }

    const allWords = [...specialWords, ...normalWords];
    const shuffledWords = shuffleArray(allWords);

    const paragraphArr: string[] = [];
    let capitalizeNext = true;

    for (const word of shuffledWords) {
        if (includeSymbols && Math.random() < 0.1) {
            if (paragraphArr.length > 0) {
                paragraphArr.pop();
            }
            paragraphArr.push(getRandomElement(wordBank["easy"]) + ". ");
            capitalizeNext = true;
        }
        if (includeSymbols && Math.random() < 0.1) {
            if (paragraphArr.length > 0) {
                paragraphArr.pop();
            }
            paragraphArr.push(getRandomElement(wordBank["medium"]) + ", ");
            capitalizeNext = true;
        }
        if (capitalizeNext) {
            paragraphArr.push(capitalizeFirstLetter(word));
            capitalizeNext = false;
        } else {
            paragraphArr.push(word);
        }
        paragraphArr.push(" ");
    }

    const finalParagraph = capitalizeFirstLetter(paragraphArr.join("").trim());

    return finalParagraph;
}
